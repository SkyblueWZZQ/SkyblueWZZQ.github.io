{"meta":{"title":"SKYBLUE","subtitle":"Thinking of learning","description":"每有会意，书于笔下，记于心间","author":"文者字清","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2017-03-09T14:30:10.000Z","updated":"2017-03-09T14:31:20.244Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-03-09T14:33:07.000Z","updated":"2017-03-09T14:33:39.688Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"js基础知识总结-数组","slug":"js基础知识总结-数组","date":"2017-03-13T12:07:22.000Z","updated":"2017-03-14T12:13:08.770Z","comments":true,"path":"2017/03/13/js基础知识总结-数组/","link":"","permalink":"http://yoursite.com/2017/03/13/js基础知识总结-数组/","excerpt":"JavaScript脚本语言（以下简称js）和其他语言一样，也有数组类型（Array）数据。不过与其他语言中的数组有着较大的差别，js中的数组项可以保存任何类型的数据，而且数组的大小是可以动态调整的。下面就总结一下数组的一些基础知识以及数组的一些常用的方法。 创建使用Array构造函数 // 普通创建方式 var arr = new Array(); // 可以传递数组长度 var arr = new Array(20); // 也可以传递数组内容 var arr = new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;); // new关键字也可以省略 var arr = Array(20);","text":"JavaScript脚本语言（以下简称js）和其他语言一样，也有数组类型（Array）数据。不过与其他语言中的数组有着较大的差别，js中的数组项可以保存任何类型的数据，而且数组的大小是可以动态调整的。下面就总结一下数组的一些基础知识以及数组的一些常用的方法。 创建使用Array构造函数 // 普通创建方式 var arr = new Array(); // 可以传递数组长度 var arr = new Array(20); // 也可以传递数组内容 var arr = new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;); // new关键字也可以省略 var arr = Array(20); 使用数组字面量方法 // 创建一个空数组 var arr = []; // 创建一个有内容的数组 var arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]; 属性length属性数组只有一个属性，就是length属性，这个属性代表数组的长度，值为number类型，可读可写。 获取长度： // 创建一个数组 var arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]; // 获取数组的长度 var length = arr.length; // 在控制台输出 console.log(length); // 输出为 4 设置长度 // 创建一个数组 var arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]; // 设置数组的长度 arr.length = 10; var length = arr.length; // 在控制台输出 console.log(length); // 输出为 10 检测数组检测某个对象是不是数组，已经成为了一个经典的问题，检测数组类型的方法有以下几种： instanceof语法：value instanceof Array value是被检测的值 // 创建一个数组 var arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]; // 检测类型 var isArray = arr instanceof Array; // 控制台输出结果 console.log(isArray); // 输出 true 判断原型语法：Object.prototype.toString.call(value)==&quot;[ object Array ]&quot; value是被检测的值 // 创建一个数组 var arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]; // 检测类型 var isArray = (Object.prototype.toString.call(arr) == &quot;[object Array]&quot;); // 控制台输出结果 console.log(isArray); // 输出 true 这种方法是最安全的检测数据类型的方法，不仅限于检测数组，也可以用于检测其他类型的数据。 判断构造函数语法：value.constructor == Array value是被检测的值 // 创建一个数组 var arr = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]; // 检测类型 var isArray = arr.constructor == Array; // 控制台输出结果 console.log(isArray); // 输出 true ES5新增语法：Array.isArray(value) value是被检测的值 // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; // 检测类型 var isArray = Array.isArray(arr); // 控制台输出结果 console.log(isArray); // 输出 true 由于这个方法是ES5新增的，以IE6、7、8为首的诸多低版本浏览器不支持此方法，想要在低版本浏览器中使用此方法，需要做兼容处理。 数组具有的方法转换方法数组转换成字符串join()语法：arr.join(&quot;分隔符&quot;) 分隔符：逗号，空格，竖线等 arr是被操作的数组说明：返回值是 包含所有数组项的字符串 // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; // 用逗号分隔 转换成字符串 var str1 = arr.join(&apos;,&apos;); // 在控制台输出结果 console.log(str1); // 输出结果为 a,b,c,d // 用空格分隔 转换成字符串 var str2 = arr.join(&quot; &quot;); // 在控制台输出结果 console.log(str2); // 输出结果为 a b c d // 用竖线分隔 转换成字符串 var str3 = arr.join(&quot;|&quot;); // 在控制台输出结果 console.log(str3); // 输出结果为 a|b|c|d join()方法很灵活，可以根据设计需要，设置分隔符，对数组进行转换。 添加方法在数组头部添加内容unshift()语法：arr.unshift(value) arr是被操作的数组 value是要插入的内容说明：返回值是 新数组的长度 // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; // 在数组前面添加新内容 var length = arr.unshift(&quot;文者字清&quot;); // 在控制台输出数组 console.log(arr); // 输出结果为 [&quot;文者字清&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] // 输出方法返回值 console.log(length); // 输出结果为 5 在数组尾部添加内容push()语法：arr.push(value) arr是被操作的数组 value是要插入的内容说明：返回值是 新数组的长度 // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; // 在数组前面添加新内容 var length = arr.push(&quot;文者字清&quot;); // 在控制台输出 console.log(arr); // 输出结果为 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;文者字清&quot;] // 输出方法返回值 console.log(length); // 输出结果为 5 移除方法从数组头部移除数组项shift()语法：arr.shift() arr是被操作的数组说明：返回值是 被移除的数组项 // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; // 在数组前面插入新内容 var result = arr.shift(); // 在控制台输出 console.log(arr); // 输出结果为 [&quot;b&quot;, &quot;c&quot;, &quot;d&quot;] // 输出方法返回值 console.log(result); // 输出结果为 a 从数组尾部移除数组项pop()语法：arr.pop() arr是被操作的数组说明：返回值是 被移除的数组项 // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; // 在数组前面插入新内容 var result = arr.pop(); // 在控制台输出 console.log(arr); // 输出结果为 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] // 输出方法返回值 console.log(result); // 输出结果为 d 重排序方法升序&amp;降序sort()语法：arr.sort() arr是被操作的数组说明：返回值是 重新排序后的数组 // 创建一个数组 var arr = [1,4,13,0,16,8]; // 重新排序 var result = arr.sort(); // 控制台输出 console.log(result); // 输出结果为 [0, 1, 13, 16, 4, 8] 可以发现，虽然我们创建的数组所有的数组项都是纯数字，但是经过sort排序之后，并没有按照数字的升序排列，这是因为，sort()方法在对数组项进行比较时，将每个数组项都转化成了字符串，然后按照字符串的排序方式进行了排序。因此就给sort()方法添加了一个参数，这个参数是一个比较函数，我们可以根据自己的需求自定义升序还是降序。 下面是一个比较常用的比较函数，我们也可以自己编写一个符合自己需求的函数 /** * @Author 文者字清 * @DateTime 2017-03-13 * @description 比较函数 * @param value1 数组项1 * @param value2 数组项2 * @return boolean */ function compare(value1, value2) { if (value1 &lt; value2) { return -1; } else if (value1 &gt; value2) { return 1; } else { return 0; } } // 创建一个数组 var arr = [1, 4, 13, 0, 16, 8]; // 重新排序 var result = arr.sort(compare); // 控制台输出 console.log(result); // 输出结果为 [0, 1, 4, 8, 13, 16] 想要实现降序，也很简单，改一下比较后返回的布尔值即可。 /** * @Author 文者字清 * @DateTime 2017-03-13 * @description 比较函数 * @param value1 数组项1 * @param value2 数组项2 * @return boolean */ function compare(value1, value2) { if (value1 &lt; value2) { return 1; } else if (value1 &gt; value2) { return -1; } else { return 0; } } // 创建一个数组 var arr = [1, 4, 13, 0, 16, 8]; // 重新排序 var result = arr.sort(compare); // 控制台输出 console.log(result); // 输出结果为 [16, 13, 8, 4, 1, 0] 组合方法cancat()功能：组合数组语法：arr.concat(array1,array2....) 参数可以是数组，也可以是具体的值说明：返回值是 新的数组 // 创建一个数组 var arr1 = [1, 4, 13, 0, 16, 8]; // 在创建两个数组 var arr2 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; var arr3 = [&quot;文者字清&quot;, &quot;咚咚呛&quot;]; // 定义一个字符串 var str = &quot;skyblue&quot;; // 进行拼接 var result = arr1.concat(arr2, arr3,str); // 控制台输出 console.log(result); // 输出结果为 [1, 4, 13, 0, 16, 8,&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;,&quot;文者字清&quot;, &quot;咚咚呛&quot;,&quot;skyblue&quot;] 截取方法slice()功能：截取数组项语法：arr.slice(start,end) start是截取数组的开始位置，end是终止位置，可选说明：返回值是 新的数组 截取的位置是start之后，不包括start // 创建一个数组 var arr = [1, 4, 13, 0, 16, 8]; // 进行截取 两个参数 var result1 = arr.slice(2,4); // 无终点 一个参数 var result2 = arr.slice(2); // 在控制台输出 console.log(result1); // 输出结果为 [13, 0] console.log(result2); // 输出结果为 [13, 0, 16, 8] 强大的splicesplice()功能：插入、替换、删除语法：arr.splice(index,num,item1,item2....) index：是 插入&amp;删除&amp;替换 的起始位置，数组的下标，必须是数字 num：要 删除&amp;替换 项的数量，可以为0，不传入时，默认删除从起始位置到数组结尾的所有项 item1,item2….：要 插入&amp;替换 的内容说明：如果是删除 返回值是删除的项组成的数组 如果是替换 返回值是替换掉的项组成的数组（其实就是删除的） 如果是添加 返回值是一个空数组 删除 不传入第二个参数： // 创建一个数组 var arr = [1, 4, 13, 0, 16, 8]; // 删除 不传入第二个参数 var result = arr.splice(2); // 在控制台输出 console.log(result); // 输出结果为 [13, 0, 16, 8] console.log(arr); // 输出结果为 [1, 4] 替换： // 创建一个数组 var arr = [1, 4, 13, 0, 16, 8]; // 将第二项后面两项替换 var result = arr.splice(2,2,&quot;a&quot;,&quot;b&quot;); // 在控制台输出 console.log(result); // 输出结果为 [13, 0] console.log(arr); // 输出结果为 [1, 4, &quot;a&quot;, &quot;b&quot;, 16, 8] 插入： // 创建一个数组 var arr = [1, 4, 13, 0, 16, 8]; // 从第二项后面插入 var result = arr.splice(2,0,&quot;a&quot;,&quot;b&quot;); // 在控制台输出 console.log(result); // 输出结果为 [] console.log(arr); // 输出结果为 [1, 4, &quot;a&quot;, &quot;b&quot;, 13, 0, 16, 8] splice()的强大之处在于其灵活的参数传递可以实现不同的功能，在工作中我们可以根据工作需要，传递不同的参数，实现我们想要的效果。 ES5新增迭代方法 数组的迭代方法本质上就是对数组进行遍历，然后根据不同需求进行不同处理。 注意：一下方法都不会改变原数组。 forEach()功能：遍历数组，对数组每一项执行给定函数语法：arr.forEach(fn(item,index,array){})参数：fn是给定的函数，将为数组每一项执行该函数 该函数有三个参数：item是数组项。index是索引值。array是原数组。 该函数必须有返回值：返回的是操作方法执行结果返回值：该方法没有返回值 // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; // 使用方法，输出每一项 var result = arr.forEach(function(item,index,array){ return console.log(item,index) }) 输出结果：forEach()方法可以在回调函数内部return一个操作方法，然后对数组项进行处理。 map()功能：遍历数组，对数组每一项执行给定函数，返回一个由函数执行结果组成的新数组。语法：arr.map(fn(item,index,array){})参数：fn是给定的函数，将为数组每一项执行该函数 该函数有三个参数：item是数组项。index是索引值。array是原数组。 该函数必须有返回值：返回的是操作方法执行结果返回值：返回由函数执行结果组成的新数组 // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; // 使用方法，为每一项添加内容 var result = arr.map(function(item,index,array){ return item + &quot;文者字清&quot;; }) console.log(result); 输出结果为： some()功能：遍历数组，对数组每一项执行给定函数，第一次遇到函数执行结果为true时就停止执行，并返回true，只有所有项的执行结果为false才返回false。语法：arr.some(fn(item,index,array){})参数：fn是给定的函数，将为数组每一项执行该函数 该函数有三个参数：item是数组项。index是索引值。array是原数组。 该函数必须有返回值：返回值是一个布尔值。 返回值：一个布尔值 // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; // 使用方法，判断“c”是否在数组中存在 var result = arr.some(function(item,index,array){ console.log(index); return item == &quot;c&quot;; }) console.log(result); 输出结果： every()功能：遍历数组，对数组每一项执行给定函数，第一次遇到函数执行结果为false时就停止执行，并返回flase，只有所有项的执行结果为true，才返回true。语法：arr.every(fn(item,index,array){})参数：fn是给定的函数，将为数组每一项执行该函数 该函数有三个参数：item是数组项。index是索引值。array是原数组。 该函数必须有返回值：返回值是一个布尔值。 返回值：一个布尔值 // 创建一个数组 var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]; // 使用方法 var result = arr.every(function(item,index,array){ console.log(index); return item == &quot;b&quot;; }) console.log(result); 输出结果： filter()功能：遍历数组，对数组每一项执行给定函数，函数执行返回true的数组项会组成一个新数组，由方法返回。本质上起到过滤功能。语法：arr.filter(fn(item,index,array){})参数：fn是给定的函数，将为数组每一项执行该函数 该函数有三个参数：item是数组项。index是索引值。array是原数组。 该函数必须有返回值：返回值是一个布尔值。 返回值：一个符合条件的数组项组成的新数组 // 创建一个数组 var arr = [&quot;1a&quot;, &quot;b1&quot;, &quot;c&quot;, &quot;d&quot;]; // 使用方法，获取包含字符串“1”的数组项 var result = arr.filter(function(item,index,array){ console.log(index); return item.indexOf(&quot;1&quot;) &gt;= 0; }) console.log(result); 输出结果： 归并方法reduce()功能： 遍历数组，对数组每一项执行给定函数，前一项执行的结果会作为后一项执行函数时的参数语法：arr.reduce(fn(prev，item,index,array){})参数：fn是给定的函数，将为数组每一项执行该函数 该函数有四个参数：prev是前一项执行的结果（第一次执行时就是数组的索引值为0的项）。item是数组项。index是索引值。array是原数组。 该函数必须有返回值：返回值是函数执行的结果。 返回值：函数执行的最终结果 // 创建一个数组 var arr = [1, 2, 3, 4, 5]; // 使用方法，将数组所有项加起来 var result = arr.reduce(function(prev, item, index, array) { console.log(index); return prev + item ; }) console.log(result,&quot;这是结果&quot;); 输出的结果：可以看出，数组遍历是从数组索引值为1的项开始的。 reduceRight()功能：和reduce()方法功能完全相同，返回值以及使用方法也完全相同，唯一的区别是，该方法是从数组的最后一项开始遍历。所以这里就不做演示了。 至此，数组的基础知识就都总结完了，方法居多，相似点也很多，所以要清晰的区分每个方法的功能以及注意事项，还是要在工作中多做尝试，多分析，多总结，才能掌握更多。^_^ 完","categories":[{"name":"前端学习-JavaScript","slug":"前端学习-JavaScript","permalink":"http://yoursite.com/categories/前端学习-JavaScript/"}],"tags":[{"name":"JavaScript，数组，js基础","slug":"JavaScript，数组，js基础","permalink":"http://yoursite.com/tags/JavaScript，数组，js基础/"}]},{"title":"css基础知识总结-选择器","slug":"css基础知识总结-选择器","date":"2017-03-11T11:15:49.000Z","updated":"2017-03-11T14:33:15.398Z","comments":true,"path":"2017/03/11/css基础知识总结-选择器/","link":"","permalink":"http://yoursite.com/2017/03/11/css基础知识总结-选择器/","excerpt":"相比于html， css是一个庞大的体系，属性颇多，值也多种多样，各种技巧，真的是让人捉摸不透，取之不尽，用之不竭。所以我一直不知该从何入手来总结css，今天学习stylus时，突发奇想，不如就以选择器作为开口，进入css的世界。 class选择器（类选择器） 定义：该选择器指定具有某个类的所有样式 语法：.className{ key:value; } 说明：”·“ 语法是class选择器的标志，所有的class选择器必须有 “·“ ；”className“是自定义的选择器名称，可以是数字、字母、下划线随意组合，注意：数字不能开头","text":"相比于html， css是一个庞大的体系，属性颇多，值也多种多样，各种技巧，真的是让人捉摸不透，取之不尽，用之不竭。所以我一直不知该从何入手来总结css，今天学习stylus时，突发奇想，不如就以选择器作为开口，进入css的世界。 class选择器（类选择器） 定义：该选择器指定具有某个类的所有样式 语法：.className{ key:value; } 说明：”·“ 语法是class选择器的标志，所有的class选择器必须有 “·“ ；”className“是自定义的选择器名称，可以是数字、字母、下划线随意组合，注意：数字不能开头 id选择器 定义：选择器指定具有某个ID的元素的样式 语法：#idName{ key:value; } 说明：“#” 语法是id选择器的标志，“idName”是自定义的选择器名称，可以是数字、字母、下划线随意组合，注意：数字不能开头 * 选择器 定义：该选择器选定所有元素 语法：*{ key:value; } 说明：这个选择器的写法比较简单，只需要一个“*” 元素选择器 定义：元素选择器选定指定名称的所有元素 语法：tagName{ key:value; } 说明：“tagName”是指定的元素名称，例如：“p”，“div” 包含选择器 定义：选定指定元素内部的所有某类元素 语法：div p{ key:value; }表示选定div内的所有p元素 说明：元素包含关系用空格表示，容器元素在前，后代元素在后 多选选择器 定义：选定指定的多个元素 语法：div,p{ key:value; }表示选定所有的div元素和p元素 说明：多个元素名称用逗号隔开（英文逗号） 父子选择器 定义：选定指定元素的直接子元素 语法：div&gt;p{ key:value; }表示选定div内的一级子元素中的所有p元素 兄弟选择器 定义：选定指定元素之后的所有平级元素（有共同的父元素） 语法：div~p{ key:value; }表示选定div后面的所有与其平级的p元素 相邻选择器 定义：选定指定元素后面第一个平级元素 语法：div+p{ key:value; }表示选定div后面第一个平级的p元素 属性选择器 定义：选定具有指定属性的所有元素 语法：div[attr]{ key:value; }表示选定具有attr属性的所有div元素 属性选择器-定值匹配 定义：选定具有指定属性值的所有元素 语法：div[attr=&quot;value&quot;]{ key:value; }表示选定具有value属性值的所有div元素 说明：value必须是完全相等 属性选择器-包含值匹配1 定义：选定包含指定属性值的所有元素 语法：div[attr~=&quot;value&quot;]{ key:value; }表示选定属性值中包含value完整单词的所有div元素 说明：属性值中包含完整的value单词，value是一个单独的属性值 属性选择器-包含值匹配2 定义：选定包含指定属性值的所有元素 语法：div[attr*=&quot;value&quot;]{ key:value; }表示选定属性值中包含“value”字符串的所有div元素 说明：属性值中包含“value”字符串即可 属性选择器-包含值开头匹配1 定义：选定属性值以某属性值开头的所有元素 语法：div[attr^=&quot;value&quot;]{ key:value; }表示选定属性值以value完整单词开头的所有div元素 说明：value可以是单独的属性值，也可以是属性值的一部分 属性选择器-包含值开头匹配2 定义：选定属性值以某字符串开头（可以是连字符的开头）的所有元素 语法：div[attr|=&quot;value&quot;]{ key:value; }表示选定属性值以value开头，并且可以是连字符的开头的所有div元素 说明：value可以是单独的属性值，也可以是属性值的一部分 属性选择器-包含值结尾匹配 定义：选定属性值以某字符串结尾的所有元素 语法：div[attr$=&quot;value&quot;]{ key:value; }表示选定属性值以value结尾的所有div元素 说明：value可以是单独的属性值，也可以是属性值的一部分 伪类选择器-索引值匹配 定义：选定指定索引值的元素 语法：div:nth-child(n){ key:value; }表示选定div元素，并且是其父元素的第n个子元素 说明：n是数字时，表示父元素的第n个元素； n是关键字时，根据关键字，进行匹配，例如：div:nth-child(odd){ key:value; }表示匹配父元素的第奇数个子元素； n是表达式，则表示循环，例如：使用公式（an+ b），a代表一个循环的大小，N是一个计数器（从0开始），以及b是偏移量。div:nth-child(3n+0){ key:value; }表示选定索引值是3的倍数的div元素 伪类选择器-关键字匹配1 定义：选定符合关键字含义的元素 语法：div:first-child{ key:value; }表示选定是其父元素的第一个子元素的div元素 伪类选择器-关键字匹配2 定义：选定符合关键字含义的元素 语法：div:last-child{ key:value; }表示选定是其父元素的最后一个子元素的div元素 伪类选择器-关键字匹配3 定义：选定符合关键字含义的元素 语法：a:hover{ key:value; }表示选定a标签，设定鼠标悬浮在上面时的样式 说明：这个选择器适用于大部分元素，不仅仅是a标签 类似的还有a:visited{ key:value; } a:active{ key:value; } a:link{ key:value; } css的选择器还有很多，这里就不一一列举了，只总结了一些比较常用的，这里面用的最多的就是class选择器和id选择器了，伪类选择器当属hover最常用，其他的用的比较少，目前来说我认为是这样0.0，哈哈。 完","categories":[{"name":"前端学习-css","slug":"前端学习-css","permalink":"http://yoursite.com/categories/前端学习-css/"}],"tags":[{"name":"css，选择器","slug":"css，选择器","permalink":"http://yoursite.com/tags/css，选择器/"}]},{"title":"html基础知识总结-标签属性","slug":"html基础知识总结-标签属性","date":"2017-03-10T14:43:19.000Z","updated":"2017-03-11T14:33:25.863Z","comments":true,"path":"2017/03/10/html基础知识总结-标签属性/","link":"","permalink":"http://yoursite.com/2017/03/10/html基础知识总结-标签属性/","excerpt":"html中有许多标签都有诸多属性，这些属性可以设置标签的样式、实现不同的功能、实现功能的方式不同等等。下面就来总结一下一些标签常用的属性以及用法（html5兼容的）。（参考w3cSchool手册） a标签 href值：url 表示链接指向的页面的地址 target值：1、_blank 表示连接在新窗口打开 2、_parent 表示连接在在父框架中打开 3、_self 表示在a标签所在框架中打开连接（默认） 4、_top 表示在窗口主体中打开连接","text":"html中有许多标签都有诸多属性，这些属性可以设置标签的样式、实现不同的功能、实现功能的方式不同等等。下面就来总结一下一些标签常用的属性以及用法（html5兼容的）。（参考w3cSchool手册） a标签 href值：url 表示链接指向的页面的地址 target值：1、_blank 表示连接在新窗口打开 2、_parent 表示连接在在父框架中打开 3、_self 表示在a标签所在框架中打开连接（默认） 4、_top 表示在窗口主体中打开连接 感觉后三个属性在打开时没什么区别，难道要和frame配合使用？（实在不想去试了^_^。。。) button标签 type值：1、button 表示普通按钮功能，是IE浏览器的默认值 2、submit 表示提交功能，除了IE浏览器以外，其他浏览器都将此属性值设为button的默认属性值（亲测，本来我还不相信的，结果在写angular项目时，使用button没有设置type属性，在chrome中却可以触发form的submit事件，IE却不行0.0） 3、reset 表示重置功能，清除表单数据 form标签 method值：1、get 表示与后台传输数据的http方法为GET 2、post 表示与后台传输数据的http方法为POST name值：自定义名称 表示表单的名称 input标签 autofocus值：autofocus（可以不设置值） 规定输入字段在页面加载时是否获得焦点 checked值：checked（可以不设置值） 此属性用于input作为选择框时，表示默认被选中 required值：required（可以不设置值） 表示此字段必须输入 disabled值：disabled（可以不设置值） 表示此元素进制被操作 maxlength值：自定义字符长度数字值 表示输入字段的最大字符长度 minlength值：自定义字符长度数字值 表示输入字段的最小字符长度 name值：自定义名称 表示input元素的名称，作为提交时的id placeholder值：自定义字段 表示input内提示用户输入的字段 type值：1、button 定义为按钮，多用于js交互 2、file 定义输入字段和”浏览”按钮，多用于文件上传 3、text 定义输入的文本，默认宽度为20 个字符 4、password 定义输入的文本为密码，字段将被掩码，显示因浏览器不同而不同 5、submit 定义提交按钮，多用于表单数据的提交 6、checkbox 定义为复选框，此时input可以被选择 7、radio 定义为单选框，此时input可以被选择 value值：规定input的值 设置的值会显示在input输入框内 option标签 disabled值：disabled（可以不设置值） 表示此元素进制被操作 selected值：selected 定义在页面加载时默认选中的选项 value值：自定义值 定义发送给后台的值 audio标签 autoplay值：autoplay（可以不设置值） 定义音频加载完毕后立即自动播放 controls值：contols（可以不设置值） 定义向用户显示控制按钮 loop值：loop（可以不设置值） 定义音频播放完毕后会重新开始播放 src值：音频文件路径 表示音频文件路径url video标签 autoplay值：autoplay（可以不设置值） 定义视频加载完毕后立即自动播放 controls值：contols（可以不设置值） 定义向用户显示控制按钮 loop值：loop（可以不设置值） 定义视频播放完毕后会重新开始播放 src值：音频文件路径 表示视频文件路径url 完","categories":[{"name":"前端学习-html","slug":"前端学习-html","permalink":"http://yoursite.com/categories/前端学习-html/"}],"tags":[{"name":"html，标签，属性","slug":"html，标签，属性","permalink":"http://yoursite.com/tags/html，标签，属性/"}]},{"title":"html基础知识总结-常用标签","slug":"html基础知识总结-常用标签","date":"2017-03-10T05:06:58.000Z","updated":"2017-03-11T11:59:00.174Z","comments":true,"path":"2017/03/10/html基础知识总结-常用标签/","link":"","permalink":"http://yoursite.com/2017/03/10/html基础知识总结-常用标签/","excerpt":"html中标签的种类有很多，根据占位方式可以划分为行内元素、行内块元素和块元素。 行内元素 行内元素：元素宽高由内容决定，不能通过样式设定。行内元素有：span、a、i、b、em、strong &lt; span&gt;&lt; /span&gt;：大多使用这个标签包含文本内容 &lt; a href=””&gt;&lt; /a&gt;：定义超链接，href属性值是链接地址，多为目标地址 &lt; i&gt;&lt; /i&gt;：内容显示为斜体 &lt; b&gt;&lt; /b&gt;：内容显示为粗体 &lt; em&gt;&lt; /em&gt;：强调，语气较重，显示为斜体 &lt; strong&gt;&lt; /strong&gt;：强调，比em语气轻一些，显示为粗体","text":"html中标签的种类有很多，根据占位方式可以划分为行内元素、行内块元素和块元素。 行内元素 行内元素：元素宽高由内容决定，不能通过样式设定。行内元素有：span、a、i、b、em、strong &lt; span&gt;&lt; /span&gt;：大多使用这个标签包含文本内容 &lt; a href=””&gt;&lt; /a&gt;：定义超链接，href属性值是链接地址，多为目标地址 &lt; i&gt;&lt; /i&gt;：内容显示为斜体 &lt; b&gt;&lt; /b&gt;：内容显示为粗体 &lt; em&gt;&lt; /em&gt;：强调，语气较重，显示为斜体 &lt; strong&gt;&lt; /strong&gt;：强调，比em语气轻一些，显示为粗体 行内块元素 行内块元素：元素不会占据一整行文本位置，宽高可以通过样式设定。行内块元素有：input、button、select &lt; input name=” “ type=” “&gt;：表单元素，通常被包含在form标签内，作为用户的输入操作元素。name属性是input的名称，作为后台获取数据的id。type属性用于设置input的类型，属性值有很多，例如：type=“button”，此时的input标签就是一个按钮了。input标签的属性也有很多，具体请参考w3cschool手册input标签。 &lt; button&gt;&lt; /button&gt;：按钮元素，显示为一个可以点击的按钮，用于提交等操作。 &lt; select&gt;&lt; /select&gt;：下拉菜单，里面的选项由&lt; option&gt;&lt; /option&gt;包含。 块元素 块元素：元素自身会占据一行文本位置，宽高可以通过样式设置。块元素有：div、p、h1~h6、ul、ol、table 、dl &lt; div&gt;&lt; /div&gt;：文本块元素，会占据一行文本位置，是使用最频繁的元素之一，通常作为容器元素使用。 &lt; p&gt;&lt; /p&gt;：段落元素，通常作为文本内容的容器元素。 &lt; h1&gt;&lt; /h1&gt;：标题元素，一共6个等级，h1标题为最高级标题，等级依次降低，显示文字大小也依次减小，下面是效果图： &lt; ul&gt;&lt; /ul&gt;：无序列表元素，列表内容由&lt; li&gt;&lt; /li&gt;标签包含，默认样式： &lt; ol&gt;&lt; /ol&gt;：有序列表元素，与ul唯一的区别就是默认样式是有序号排列的，如图： &lt; table&gt;&lt; /table&gt;：表格元素 &lt; dl&gt;&lt; /dl&gt;：自定义表格元素 完","categories":[{"name":"前端学习-html","slug":"前端学习-html","permalink":"http://yoursite.com/categories/前端学习-html/"}],"tags":[{"name":"html，元素，标签，行内，块","slug":"html，元素，标签，行内，块","permalink":"http://yoursite.com/tags/html，元素，标签，行内，块/"}]},{"title":"html基础知识总结-文档结构","slug":"html基础知识总结-文档结构","date":"2017-03-09T14:21:44.000Z","updated":"2017-03-11T11:58:31.009Z","comments":true,"path":"2017/03/09/html基础知识总结-文档结构/","link":"","permalink":"http://yoursite.com/2017/03/09/html基础知识总结-文档结构/","excerpt":"学了这么久的前端，现在说起最基础的知识却说不上多少，索性就来系统的总结一下吧，有不足之处，望各位不吝赐教^_^ html文本结构&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; 这是html5的文本结构","text":"学了这么久的前端，现在说起最基础的知识却说不上多少，索性就来系统的总结一下吧，有不足之处，望各位不吝赐教^_^ html文本结构&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; 这是html5的文本结构 &lt;!DOCTYPE html&gt;代表文档遵守的html版本规范，是浏览器识别文档版本的命令。注意：&lt;!DOCTYPE html&gt;不是html标签 &lt; html&gt;&lt; /html&gt; 是文档主体，html的所有内容都包含在这对标签内 &lt; html lang=”en”&gt;中的 lang=”en” 是设置语言种类的属性 &lt; head&gt;&lt; /head&gt;是网页的头部信息，包含着 meta title style 等标签对 &lt; meta&gt;&lt; /meta&gt;根据对它的一些属性设置不同的值，可以设置网页的一些基本信息，例如：charset属性，表示网页编码格式。特别是在开发移动端web网页时，meta标签的设置显得尤为重要。 &lt; title&gt;&lt; /title&gt;设置网页的标题，是 head 标签中必须要包含的。会显示在浏览器窗口的标题栏或状态栏上。同样，当把文档加入用户的链接列表或者收藏夹或书签列表时，标题将成为该文档链接的默认名称 &lt; body&gt;&lt; /body&gt;是文档的内容主体部分，网页显示的内容都包含在body标签对内。 完","categories":[{"name":"前端学习-html","slug":"前端学习-html","permalink":"http://yoursite.com/categories/前端学习-html/"}],"tags":[{"name":"html，文档结构","slug":"html，文档结构","permalink":"http://yoursite.com/tags/html，文档结构/"}]}]}